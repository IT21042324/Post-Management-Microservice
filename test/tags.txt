// const request = require('supertest');
// const app = require('../server.js');

// describe('Test GET /posts/:id/tags', () => {
//     it('should return all tags for a valid post ID', async () => {
//       // Setup: Create a test post with existing tags in the database (implementation details omitted)
//       const testPostId = 'VALID_POST_ID'; // Replace with actual ID

//       const response = await request(app)
//         .get(`/posts/${testPostId}/tags`);

//       expect(response.status).toBe(200);
//       expect(response.body).toBeInstanceOf(Array); // Ensure an array is returned
//     });

//     it('should return 404 for an invalid post ID', async () => {
//       const invalidPostId = 'INVALID_POST_ID';

//       const response = await request(app)
//         .get(`/posts/${invalidPostId}/tags`);

//       expect(response.status).toBe(404);
//       expect(response.body).toHaveProperty('error'); // Expect error message
//     });
//   });

//   describe('Test PUT /posts/:id/tags', () => {
//     it('should update post tags with valid data', async () => {
//       // Setup: Create a test post with existing tags (implementation details omitted)
//       const testPostId = 'VALID_POST_ID';
//       const updatedTags = ['tag1', 'tag2'];

//       const response = await request(app)
//         .put(`/posts/${testPostId}/tags`)
//         .send({ tags: updatedTags });

//       expect(response.status).toBe(200);
//       expect(response.body).toHaveProperty('tags'); // Expect updated tags in response
//       expect(response.body.tags).toEqual(updatedTags); // Verify tags match
//     });

//     it('should return 400 for invalid request body', async () => {
//       const testPostId = 'VALID_POST_ID';
//       const invalidData = { name: 'invalid' }; // Not an array of tags

//       const response = await request(app)
//         .put(`/posts/${testPostId}/tags`)
//         .send(invalidData);

//       expect(response.status).toBe(400);
//       expect(response.body).toHaveProperty('error'); // Expect error message
//     });
//   });

//   describe('Test DELETE /posts/:id/tags/:tagIndex', () => {
//     it('should delete a tag with a valid post ID and tag index', async () => {
//       // Setup: Create a test post with multiple tags (implementation details omitted)
//       const testPostId = 'VALID_POST_ID';
//       const validTagIndex = 1; // Assuming tags are indexed (adjust based on implementation)

//       const response = await request(app)
//         .delete(`/posts/${testPostId}/tags/${validTagIndex}`);

//       expect(response.status).toBe(200);
//       expect(response.body).toHaveProperty('tags'); // Expect updated tags in response
//       // Additional assertions can be made based on expected tag removal
//     });

//     it('should return 400 for an invalid tag index', async () => {
//       const testPostId = 'VALID_POST_ID';
//       const invalidTagIndex = -1; // Negative index

//       const response = await request(app)
//         .delete(`/posts/${testPostId}/tags/${invalidTagIndex}`);

//       expect(response.status).toBe(400);
//       expect(response.body).toHaveProperty('error'); // Expect error message
//     });
//   });

//   describe('Test PUT /posts/:id/status', () => {
//     it('should update post status with valid data', async () => {
//       const testPostId = 'VALID_POST_ID';
//       const newStatus = 'true'; // Or 'false' depending on your status definition

//       const response = await request(app)
//         .put(`/posts/${testPostId}/status`)
//         .send({ postStatus: newStatus });

//       expect(response.status).toBe(200);
//       expect(response.body).toHaveProperty('postStatus');
//       expect(response.body.postStatus).toBe(newStatus);
//     });

//     it('should return 400 for an invalid status value', async () => {
//         const testPostId = 'VALID_POST_ID';
//         const invalidStatus = 'invalid'; // Not 'true' or 'false'

//         const response = await request(app)
//           .put(`/posts/${testPostId}/status`)
//           .send({ postStatus: invalidStatus });

//         expect(response.status).toBe(400);
//         expect(response.body).toHaveProperty('error'); // Expect error message
//       });
//     });
