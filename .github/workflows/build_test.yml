name: Build and Test

# Triggers the workflow on push or pull request events to the 'main' branch
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Global environment variables
env:
  AWS_REGION: ap-south-1  # Specifies the AWS region for deployments

# Permissions for the GitHub Actions runner
permissions:
  id-token: write  # Allows GitHub Actions to interact with AWS via OIDC
  contents: read  # Allows GitHub Actions to checkout the repository

# Define all jobs to run in the workflow
jobs:
  # Job to build the application and run tests
  build-and-test:
    runs-on: ubuntu-latest  # Specifies the runner environment
    strategy:
      matrix:
        node-version: [20.x]  # Node.js version matrix for testing across versions
    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Checks out a copy of your repository

      - name: Set up Node.js
        uses: actions/setup-node@v2  # Sets up Node.js environment
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'  # Caches npm modules for faster execution

      - name: Install dependencies
        run: npm ci  # Installs project dependencies using npm ci for a clean install

      - name: Run tests
        run: npm test  # Executes tests using the npm test script

  # Job to deploy the application to AWS services
  deploy:
    name: Deploy to AWS
    needs: build-and-test  # Ensures this job runs after the build-and-test job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Re-checkout the code for this job

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2  # Configures AWS credentials for use in the job
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::123456789012:role/github-assume-role
          role-session-name: GitHubActionsSession

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1  # Logs into Amazon ECR

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: post-management-microservice
          IMAGE_TAG: nodejs-service-${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .  # Builds the Docker image
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG  # Pushes the image to ECR
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy to App Runner
        uses: awslabs/amazon-app-runner-deploy@main  # Deploys the Docker image to AWS App Runner
        with:
          service: post-management-microservice  # App Runner service name
          image: ${{ steps.build-and-push-image.outputs.image }}  # Image to deploy
          access-role-arn: ${{ secrets.AWS_APP_RUNNER_ROLE_ARN }}
          region: ${{ env.AWS_REGION }}
          cpu: 1
          memory: 2
          port: 8080
          wait-for-service-stability-seconds: 1200

      - name: Deploy to AWS S3
        run: npm run deploy-aws  # Executes the S3 deployment script defined in package.json

      - name: Output App Runner URL
        run: echo "App Runner URL will be available in the AWS console for the service."
